# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time

type User {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
  email: String!
  skills: [String!]!
}

input NewUser {
  firstName: String!
  lastName: String!
  username: String
  password: String!
  email: String!
  skills: [String!]!
}
input UpdatedUser {
  firstName: String
  lastName: String
  username: String
  old_password: String
  new_password: String
  email: String
  skills: [String!]
}
type Project {
  id: ID!
  name: String!
  description: String!
  owner: User!
  public: Boolean!
  completionStatus: String!
  collaborators: [User!]!
  skills_needed: [String!]!
}

# nulls when not logged in
type AllProjects {
  public: [Project!]!
  owned: [Project!]
  collaborated: [Project!]
}
input NewProject {
  name: String!
  description: String
  public: Boolean
  collaborators: [ID!]
  skills_needed: [String!]
}

input UpdatedProject {
  name: String
  description: String
  public: Boolean
  completionStatus: String
  collaborators: [ID!]
  skills_needed: [String!]
}
type Note {
  id: ID!
  project: Project!
  addedBy: User!
  lastModified: Time!
  note: String!
}

type Task {
  id: ID!
  project: Project!
  addedBy: User!
  assignedTo: [User!]
  task: String!
  lastModified: Time!
  deadline: Time
  priorityLevel: String!
  completionStatus: String!
}
input NewTask {
  task: String!
  assignedTo: [ID!]
  deadline: Time
  priorityLevel: String
}
input UpdatedTask {
  task: String
  assignedTo: [ID!]
  deadline: Time
  priorityLevel: String
  completionStatus: String
}
type CollabRequest {
  id: ID!
  project: Project!
  requester: User!
  message: String!
  #after request is considered
  responder: User
  feedback: String

  status: String!
}

input Login {
  email: String
  username: String
  password: String!
}

type Query {
  # users
  users: [User!]! # get all users
  me: User! # get current user
  user(id: ID!): User # get user by id
  # projects
  projects: AllProjects! # get all projects
  recommendedProjects: [Project!]! # get all public projects that match my skills
  project(id: ID!): Project! # get project by id
  userProjectsById(id: ID!): [Project!]! # ? get all projects by user id
  # notes
  notesByProject(id: ID!): [Note!]! # get all notes by project id
  note(id: ID!): Note! # get note by id
  # tasks
  tasks: [Task!]! # get all tasks I was assigned to
  tasksByProject(id: ID!): [Task!]! # get all tasks by project id
  task(id: ID!): Task! # get task by id
  # collab requests
  collabRequests: [CollabRequest!]! # get all my collab requests
  collabRequestsByProject(id: ID!): [CollabRequest!]! # get all collab requests by project id
  collabRequest(id: ID!): CollabRequest! # get collab request by id
}

type Mutation {
  # auth
  login(input: Login!): String!
  refreshToken(old_token: String!): String!

  createUser(newUser: NewUser!): User!
  updateUser(updatedUser: UpdatedUser!): User!

  createProject(newProject: NewProject!): Project!
  updateProject(id: ID!, updatedProject: UpdatedProject!): Project!
  deleteProject(id: ID!): Boolean!

  createNote(projectId: ID!, note: String!): Note!
  updateNote(id: ID!, note: String!): Note!
  deleteNote(id: ID!): Boolean!

  createTask(projectId: ID!, newTask: NewTask!): Task!
  updateTask(id: ID!, updatedTask: UpdatedTask!): Task!
  deleteTask(id: ID!): Boolean!

  createCollabRequest(projectId: ID!, message: String!): CollabRequest!
  answerCollabRequest(id: ID!, status: String!, feedback: String!): CollabRequest!
  deleteCollabRequest(id: ID!): Boolean!
}
